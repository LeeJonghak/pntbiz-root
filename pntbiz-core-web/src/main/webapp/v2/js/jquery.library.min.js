/*!
 * jQuery Form Plugin
 * version: 3.51.0-2014.06.20
 * Requires jQuery v1.5 or later
 * Copyright (c) 2014 M. Alsup
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Project repository: https://github.com/malsup/form
 * Dual licensed under the MIT and GPL licenses.
 * https://github.com/malsup/form#copyright-and-license
 */
!function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):e("undefined"!=typeof jQuery?jQuery:window.Zepto)}(function(e){"use strict";function t(t){var r=t.data;t.isDefaultPrevented()||(t.preventDefault(),e(t.target).ajaxSubmit(r))}function r(t){var r=t.target,a=e(r);if(!a.is("[type=submit],[type=image]")){var n=a.closest("[type=submit]");if(0===n.length)return;r=n[0]}var i=this;if(i.clk=r,"image"==r.type)if(void 0!==t.offsetX)i.clk_x=t.offsetX,i.clk_y=t.offsetY;else if("function"==typeof e.fn.offset){var o=a.offset();i.clk_x=t.pageX-o.left,i.clk_y=t.pageY-o.top}else i.clk_x=t.pageX-r.offsetLeft,i.clk_y=t.pageY-r.offsetTop;setTimeout(function(){i.clk=i.clk_x=i.clk_y=null},100)}function a(){if(e.fn.ajaxSubmit.debug){var t="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(t):window.opera&&window.opera.postError&&window.opera.postError(t)}}var n={};n.fileapi=void 0!==e("<input type='file'/>").get(0).files,n.formdata=void 0!==window.FormData;var i=!!e.fn.prop;e.fn.attr2=function(){if(!i)return this.attr.apply(this,arguments);var e=this.prop.apply(this,arguments);return e&&e.jquery||"string"==typeof e?e:this.attr.apply(this,arguments)},e.fn.ajaxSubmit=function(t){function r(r){var a,n,i=e.param(r,t.traditional).split("&"),o=i.length,s=[];for(a=0;o>a;a++)i[a]=i[a].replace(/\+/g," "),n=i[a].split("="),s.push([decodeURIComponent(n[0]),decodeURIComponent(n[1])]);return s}function o(a){for(var n=new FormData,i=0;i<a.length;i++)n.append(a[i].name,a[i].value);if(t.extraData){var o=r(t.extraData);for(i=0;i<o.length;i++)o[i]&&n.append(o[i][0],o[i][1])}t.data=null;var s=e.extend(!0,{},e.ajaxSettings,t,{contentType:!1,processData:!1,cache:!1,type:u||"POST"});t.uploadProgress&&(s.xhr=function(){var r=e.ajaxSettings.xhr();return r.upload&&r.upload.addEventListener("progress",function(e){var r=0,a=e.loaded||e.position,n=e.total;e.lengthComputable&&(r=Math.ceil(a/n*100)),t.uploadProgress(e,a,n,r)},!1),r}),s.data=null;var c=s.beforeSend;return s.beforeSend=function(e,r){r.data=t.formData?t.formData:n,c&&c.call(this,e,r)},e.ajax(s)}function s(r){function n(e){var t=null;try{e.contentWindow&&(t=e.contentWindow.document)}catch(r){a("cannot get iframe.contentWindow document: "+r)}if(t)return t;try{t=e.contentDocument?e.contentDocument:e.document}catch(r){a("cannot get iframe.contentDocument: "+r),t=e.document}return t}function o(){function t(){try{var e=n(g).readyState;a("state = "+e),e&&"uninitialized"==e.toLowerCase()&&setTimeout(t,50)}catch(r){a("Server abort: ",r," (",r.name,")"),s(k),j&&clearTimeout(j),j=void 0}}var r=f.attr2("target"),i=f.attr2("action"),o="multipart/form-data",c=f.attr("enctype")||f.attr("encoding")||o;w.setAttribute("target",p),(!u||/post/i.test(u))&&w.setAttribute("method","POST"),i!=m.url&&w.setAttribute("action",m.url),m.skipEncodingOverride||u&&!/post/i.test(u)||f.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),m.timeout&&(j=setTimeout(function(){T=!0,s(D)},m.timeout));var l=[];try{if(m.extraData)for(var d in m.extraData)m.extraData.hasOwnProperty(d)&&l.push(e.isPlainObject(m.extraData[d])&&m.extraData[d].hasOwnProperty("name")&&m.extraData[d].hasOwnProperty("value")?e('<input type="hidden" name="'+m.extraData[d].name+'">').val(m.extraData[d].value).appendTo(w)[0]:e('<input type="hidden" name="'+d+'">').val(m.extraData[d]).appendTo(w)[0]);m.iframeTarget||v.appendTo("body"),g.attachEvent?g.attachEvent("onload",s):g.addEventListener("load",s,!1),setTimeout(t,15);try{w.submit()}catch(h){var x=document.createElement("form").submit;x.apply(w)}}finally{w.setAttribute("action",i),w.setAttribute("enctype",c),r?w.setAttribute("target",r):f.removeAttr("target"),e(l).remove()}}function s(t){if(!x.aborted&&!F){if(M=n(g),M||(a("cannot access response document"),t=k),t===D&&x)return x.abort("timeout"),void S.reject(x,"timeout");if(t==k&&x)return x.abort("server abort"),void S.reject(x,"error","server abort");if(M&&M.location.href!=m.iframeSrc||T){g.detachEvent?g.detachEvent("onload",s):g.removeEventListener("load",s,!1);var r,i="success";try{if(T)throw"timeout";var o="xml"==m.dataType||M.XMLDocument||e.isXMLDoc(M);if(a("isXml="+o),!o&&window.opera&&(null===M.body||!M.body.innerHTML)&&--O)return a("requeing onLoad callback, DOM not available"),void setTimeout(s,250);var u=M.body?M.body:M.documentElement;x.responseText=u?u.innerHTML:null,x.responseXML=M.XMLDocument?M.XMLDocument:M,o&&(m.dataType="xml"),x.getResponseHeader=function(e){var t={"content-type":m.dataType};return t[e.toLowerCase()]},u&&(x.status=Number(u.getAttribute("status"))||x.status,x.statusText=u.getAttribute("statusText")||x.statusText);var c=(m.dataType||"").toLowerCase(),l=/(json|script|text)/.test(c);if(l||m.textarea){var f=M.getElementsByTagName("textarea")[0];if(f)x.responseText=f.value,x.status=Number(f.getAttribute("status"))||x.status,x.statusText=f.getAttribute("statusText")||x.statusText;else if(l){var p=M.getElementsByTagName("pre")[0],h=M.getElementsByTagName("body")[0];p?x.responseText=p.textContent?p.textContent:p.innerText:h&&(x.responseText=h.textContent?h.textContent:h.innerText)}}else"xml"==c&&!x.responseXML&&x.responseText&&(x.responseXML=X(x.responseText));try{E=_(x,c,m)}catch(y){i="parsererror",x.error=r=y||i}}catch(y){a("error caught: ",y),i="error",x.error=r=y||i}x.aborted&&(a("upload aborted"),i=null),x.status&&(i=x.status>=200&&x.status<300||304===x.status?"success":"error"),"success"===i?(m.success&&m.success.call(m.context,E,"success",x),S.resolve(x.responseText,"success",x),d&&e.event.trigger("ajaxSuccess",[x,m])):i&&(void 0===r&&(r=x.statusText),m.error&&m.error.call(m.context,x,i,r),S.reject(x,"error",r),d&&e.event.trigger("ajaxError",[x,m,r])),d&&e.event.trigger("ajaxComplete",[x,m]),d&&!--e.active&&e.event.trigger("ajaxStop"),m.complete&&m.complete.call(m.context,x,i),F=!0,m.timeout&&clearTimeout(j),setTimeout(function(){m.iframeTarget?v.attr("src",m.iframeSrc):v.remove(),x.responseXML=null},100)}}}var c,l,m,d,p,v,g,x,y,b,T,j,w=f[0],S=e.Deferred();if(S.abort=function(e){x.abort(e)},r)for(l=0;l<h.length;l++)c=e(h[l]),i?c.prop("disabled",!1):c.removeAttr("disabled");if(m=e.extend(!0,{},e.ajaxSettings,t),m.context=m.context||m,p="jqFormIO"+(new Date).getTime(),m.iframeTarget?(v=e(m.iframeTarget),b=v.attr2("name"),b?p=b:v.attr2("name",p)):(v=e('<iframe name="'+p+'" src="'+m.iframeSrc+'" />'),v.css({position:"absolute",top:"-1000px",left:"-1000px"})),g=v[0],x={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(t){var r="timeout"===t?"timeout":"aborted";a("aborting upload... "+r),this.aborted=1;try{g.contentWindow.document.execCommand&&g.contentWindow.document.execCommand("Stop")}catch(n){}v.attr("src",m.iframeSrc),x.error=r,m.error&&m.error.call(m.context,x,r,t),d&&e.event.trigger("ajaxError",[x,m,r]),m.complete&&m.complete.call(m.context,x,r)}},d=m.global,d&&0===e.active++&&e.event.trigger("ajaxStart"),d&&e.event.trigger("ajaxSend",[x,m]),m.beforeSend&&m.beforeSend.call(m.context,x,m)===!1)return m.global&&e.active--,S.reject(),S;if(x.aborted)return S.reject(),S;y=w.clk,y&&(b=y.name,b&&!y.disabled&&(m.extraData=m.extraData||{},m.extraData[b]=y.value,"image"==y.type&&(m.extraData[b+".x"]=w.clk_x,m.extraData[b+".y"]=w.clk_y)));var D=1,k=2,A=e("meta[name=csrf-token]").attr("content"),L=e("meta[name=csrf-param]").attr("content");L&&A&&(m.extraData=m.extraData||{},m.extraData[L]=A),m.forceSync?o():setTimeout(o,10);var E,M,F,O=50,X=e.parseXML||function(e,t){return window.ActiveXObject?(t=new ActiveXObject("Microsoft.XMLDOM"),t.async="false",t.loadXML(e)):t=(new DOMParser).parseFromString(e,"text/xml"),t&&t.documentElement&&"parsererror"!=t.documentElement.nodeName?t:null},C=e.parseJSON||function(e){return window.eval("("+e+")")},_=function(t,r,a){var n=t.getResponseHeader("content-type")||"",i="xml"===r||!r&&n.indexOf("xml")>=0,o=i?t.responseXML:t.responseText;return i&&"parsererror"===o.documentElement.nodeName&&e.error&&e.error("parsererror"),a&&a.dataFilter&&(o=a.dataFilter(o,r)),"string"==typeof o&&("json"===r||!r&&n.indexOf("json")>=0?o=C(o):("script"===r||!r&&n.indexOf("javascript")>=0)&&e.globalEval(o)),o};return S}if(!this.length)return a("ajaxSubmit: skipping submit process - no element selected"),this;var u,c,l,f=this;"function"==typeof t?t={success:t}:void 0===t&&(t={}),u=t.type||this.attr2("method"),c=t.url||this.attr2("action"),l="string"==typeof c?e.trim(c):"",l=l||window.location.href||"",l&&(l=(l.match(/^([^#]+)/)||[])[1]),t=e.extend(!0,{url:l,success:e.ajaxSettings.success,type:u||e.ajaxSettings.type,iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},t);var m={};if(this.trigger("form-pre-serialize",[this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"),this;if(t.beforeSerialize&&t.beforeSerialize(this,t)===!1)return a("ajaxSubmit: submit aborted via beforeSerialize callback"),this;var d=t.traditional;void 0===d&&(d=e.ajaxSettings.traditional);var p,h=[],v=this.formToArray(t.semantic,h);if(t.data&&(t.extraData=t.data,p=e.param(t.data,d)),t.beforeSubmit&&t.beforeSubmit(v,this,t)===!1)return a("ajaxSubmit: submit aborted via beforeSubmit callback"),this;if(this.trigger("form-submit-validate",[v,this,t,m]),m.veto)return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"),this;var g=e.param(v,d);p&&(g=g?g+"&"+p:p),"GET"==t.type.toUpperCase()?(t.url+=(t.url.indexOf("?")>=0?"&":"?")+g,t.data=null):t.data=g;var x=[];if(t.resetForm&&x.push(function(){f.resetForm()}),t.clearForm&&x.push(function(){f.clearForm(t.includeHidden)}),!t.dataType&&t.target){var y=t.success||function(){};x.push(function(r){var a=t.replaceTarget?"replaceWith":"html";e(t.target)[a](r).each(y,arguments)})}else t.success&&x.push(t.success);if(t.success=function(e,r,a){for(var n=t.context||this,i=0,o=x.length;o>i;i++)x[i].apply(n,[e,r,a||f,f])},t.error){var b=t.error;t.error=function(e,r,a){var n=t.context||this;b.apply(n,[e,r,a,f])}}if(t.complete){var T=t.complete;t.complete=function(e,r){var a=t.context||this;T.apply(a,[e,r,f])}}var j=e("input[type=file]:enabled",this).filter(function(){return""!==e(this).val()}),w=j.length>0,S="multipart/form-data",D=f.attr("enctype")==S||f.attr("encoding")==S,k=n.fileapi&&n.formdata;a("fileAPI :"+k);var A,L=(w||D)&&!k;t.iframe!==!1&&(t.iframe||L)?t.closeKeepAlive?e.get(t.closeKeepAlive,function(){A=s(v)}):A=s(v):A=(w||D)&&k?o(v):e.ajax(t),f.removeData("jqxhr").data("jqxhr",A);for(var E=0;E<h.length;E++)h[E]=null;return this.trigger("form-submit-notify",[this,t]),this},e.fn.ajaxForm=function(n){if(n=n||{},n.delegation=n.delegation&&e.isFunction(e.fn.on),!n.delegation&&0===this.length){var i={s:this.selector,c:this.context};return!e.isReady&&i.s?(a("DOM not ready, queuing ajaxForm"),e(function(){e(i.s,i.c).ajaxForm(n)}),this):(a("terminating; zero elements found by selector"+(e.isReady?"":" (DOM not ready)")),this)}return n.delegation?(e(document).off("submit.form-plugin",this.selector,t).off("click.form-plugin",this.selector,r).on("submit.form-plugin",this.selector,n,t).on("click.form-plugin",this.selector,n,r),this):this.ajaxFormUnbind().bind("submit.form-plugin",n,t).bind("click.form-plugin",n,r)},e.fn.ajaxFormUnbind=function(){return this.unbind("submit.form-plugin click.form-plugin")},e.fn.formToArray=function(t,r){var a=[];if(0===this.length)return a;var i,o=this[0],s=this.attr("id"),u=t?o.getElementsByTagName("*"):o.elements;if(u&&!/MSIE [678]/.test(navigator.userAgent)&&(u=e(u).get()),s&&(i=e(':input[form="'+s+'"]').get(),i.length&&(u=(u||[]).concat(i))),!u||!u.length)return a;var c,l,f,m,d,p,h;for(c=0,p=u.length;p>c;c++)if(d=u[c],f=d.name,f&&!d.disabled)if(t&&o.clk&&"image"==d.type)o.clk==d&&(a.push({name:f,value:e(d).val(),type:d.type}),a.push({name:f+".x",value:o.clk_x},{name:f+".y",value:o.clk_y}));else if(m=e.fieldValue(d,!0),m&&m.constructor==Array)for(r&&r.push(d),l=0,h=m.length;h>l;l++)a.push({name:f,value:m[l]});else if(n.fileapi&&"file"==d.type){r&&r.push(d);var v=d.files;if(v.length)for(l=0;l<v.length;l++)a.push({name:f,value:v[l],type:d.type});else a.push({name:f,value:"",type:d.type})}else null!==m&&"undefined"!=typeof m&&(r&&r.push(d),a.push({name:f,value:m,type:d.type,required:d.required}));if(!t&&o.clk){var g=e(o.clk),x=g[0];f=x.name,f&&!x.disabled&&"image"==x.type&&(a.push({name:f,value:g.val()}),a.push({name:f+".x",value:o.clk_x},{name:f+".y",value:o.clk_y}))}return a},e.fn.formSerialize=function(t){return e.param(this.formToArray(t))},e.fn.fieldSerialize=function(t){var r=[];return this.each(function(){var a=this.name;if(a){var n=e.fieldValue(this,t);if(n&&n.constructor==Array)for(var i=0,o=n.length;o>i;i++)r.push({name:a,value:n[i]});else null!==n&&"undefined"!=typeof n&&r.push({name:this.name,value:n})}}),e.param(r)},e.fn.fieldValue=function(t){for(var r=[],a=0,n=this.length;n>a;a++){var i=this[a],o=e.fieldValue(i,t);null===o||"undefined"==typeof o||o.constructor==Array&&!o.length||(o.constructor==Array?e.merge(r,o):r.push(o))}return r},e.fieldValue=function(t,r){var a=t.name,n=t.type,i=t.tagName.toLowerCase();if(void 0===r&&(r=!0),r&&(!a||t.disabled||"reset"==n||"button"==n||("checkbox"==n||"radio"==n)&&!t.checked||("submit"==n||"image"==n)&&t.form&&t.form.clk!=t||"select"==i&&-1==t.selectedIndex))return null;if("select"==i){var o=t.selectedIndex;if(0>o)return null;for(var s=[],u=t.options,c="select-one"==n,l=c?o+1:u.length,f=c?o:0;l>f;f++){var m=u[f];if(m.selected){var d=m.value;if(d||(d=m.attributes&&m.attributes.value&&!m.attributes.value.specified?m.text:m.value),c)return d;s.push(d)}}return s}return e(t).val()},e.fn.clearForm=function(t){return this.each(function(){e("input,select,textarea",this).clearFields(t)})},e.fn.clearFields=e.fn.clearInputs=function(t){var r=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function(){var a=this.type,n=this.tagName.toLowerCase();r.test(a)||"textarea"==n?this.value="":"checkbox"==a||"radio"==a?this.checked=!1:"select"==n?this.selectedIndex=-1:"file"==a?/MSIE/.test(navigator.userAgent)?e(this).replaceWith(e(this).clone(!0)):e(this).val(""):t&&(t===!0&&/hidden/.test(a)||"string"==typeof t&&e(this).is(t))&&(this.value="")})},e.fn.resetForm=function(){return this.each(function(){("function"==typeof this.reset||"object"==typeof this.reset&&!this.reset.nodeType)&&this.reset()})},e.fn.enable=function(e){return void 0===e&&(e=!0),this.each(function(){this.disabled=!e})},e.fn.selected=function(t){return void 0===t&&(t=!0),this.each(function(){var r=this.type;if("checkbox"==r||"radio"==r)this.checked=t;else if("option"==this.tagName.toLowerCase()){var a=e(this).parent("select");t&&a[0]&&"select-one"==a[0].type&&a.find("option").selected(!1),this.selected=t}})},e.fn.ajaxSubmit.debug=!1});


/* jquery-multifile v2.2.1 @ 2015-05-07 09:05:57 */
window.jQuery&&function(a){"use strict";function b(a){return a>1048576?(a/1048576).toFixed(1)+"Mb":1024==a?"1Mb":(a/1024).toFixed(1)+"Kb"}function c(a){return(a.files&&a.files.length?a.files:null)||[{name:a.value,size:0,type:((a.value||"").match(/[^\.]+$/i)||[""])[0]}]}a.fn.MultiFile=function(d){if(0==this.length)return this;if("string"==typeof arguments[0]){if(this.length>1){var e=arguments;return this.each(function(){a.fn.MultiFile.apply(a(this),e)})}return a.fn.MultiFile[arguments[0]].apply(this,a.makeArray(arguments).slice(1)||[])}"number"==typeof d&&(d={max:d});var d=a.extend({},a.fn.MultiFile.options,d||{});a("form").not("MultiFile-intercepted").addClass("MultiFile-intercepted").submit(a.fn.MultiFile.disableEmpty),a.fn.MultiFile.options.autoIntercept&&(a.fn.MultiFile.intercept(a.fn.MultiFile.options.autoIntercept),a.fn.MultiFile.options.autoIntercept=null),this.not(".MultiFile-applied").addClass("MultiFile-applied").each(function(){window.MultiFile=(window.MultiFile||0)+1;var e=window.MultiFile,f={e:this,E:a(this),clone:a(this).clone()},g=a.extend({},a.fn.MultiFile.options,d||{},(a.metadata?f.E.metadata():a.meta?f.E.data():null)||{},{});g.max>0||(g.max=f.E.attr("maxlength")),g.max>0||(g.max=(String(f.e.className.match(/\b(max|limit)\-([0-9]+)\b/gi)||[""]).match(/[0-9]+/gi)||[""])[0],g.max=g.max>0?String(g.max).match(/[0-9]+/gi)[0]:-1),g.max=new Number(g.max),g.accept=g.accept||f.E.attr("accept")||"",g.accept||(g.accept=f.e.className.match(/\b(accept\-[\w\|]+)\b/gi)||"",g.accept=new String(g.accept).replace(/^(accept|ext)\-/i,"")),g.maxsize=g.maxsize>0?g.maxsize:null||f.E.data("maxsize")||0,g.maxsize>0||(g.maxsize=(String(f.e.className.match(/\b(maxsize|maxload|size)\-([0-9]+)\b/gi)||[""]).match(/[0-9]+/gi)||[""])[0],g.maxsize=g.maxsize>0?String(g.maxsize).match(/[0-9]+/gi)[0]:-1),g.maxfile=g.maxfile>0?g.maxfile:null||f.E.data("maxfile")||0,g.maxfile>0||(g.maxfile=(String(f.e.className.match(/\b(maxfile|filemax)\-([0-9]+)\b/gi)||[""]).match(/[0-9]+/gi)||[""])[0],g.maxfile=g.maxfile>0?String(g.maxfile).match(/[0-9]+/gi)[0]:-1),g.maxfile>1&&(g.maxfile=1024*g.maxfile),g.maxsize>1&&(g.maxsize=1024*g.maxsize),g.max>1&&f.E.attr("multiple","multiple").prop("multiple",!0),a.extend(f,g||{}),f.STRING=a.extend({},a.fn.MultiFile.options.STRING,f.STRING),a.extend(f,{n:0,slaves:[],files:[],instanceKey:f.e.id||"MultiFile"+String(e),generateID:function(a){return f.instanceKey+(a>0?"_F"+String(a):"")},trigger:function(b,d,e,f){var g,h=e[b]||e["on"+b];return h?(f=f||e.files||c(this),a.each(f,function(a,b){g=h.apply(e.wrapper,[d,b.name,e,b])}),g):void 0}}),String(f.accept).length>1&&(f.accept=f.accept.replace(/\W+/g,"|").replace(/^\W|\W$/g,""),f.rxAccept=new RegExp("\\.("+(f.accept?f.accept:"")+")$","gi")),f.wrapID=f.instanceKey,f.E.wrap('<div class="MultiFile-wrap" id="'+f.wrapID+'"></div>'),f.wrapper=a("#"+f.wrapID),f.e.name=f.e.name||"file"+e+"[]",f.list||(f.wrapper.append('<div class="MultiFile-list" id="'+f.wrapID+'_list"></div>'),f.list=a("#"+f.wrapID+"_list")),f.list=a(f.list),f.addSlave=function(d,g){f.n++,d.MultiFile=f,d.id=d.name="",d.id=f.generateID(g),d.name=String(f.namePattern.replace(/\$name/gi,a(f.clone).attr("name")).replace(/\$id/gi,a(f.clone).attr("id")).replace(/\$g/gi,e).replace(/\$i/gi,g));var h;f.max>0&&f.files.length>f.max&&(d.disabled=!0,h=!0),f.current=d,d=a(d),d.val("").attr("value","")[0].value="",d.addClass("MultiFile-applied"),d.change(function(){a(this).blur();var e=this,h=f.files||[],i=this.files||[{name:this.value,size:0,type:((this.value||"").match(/[^\.]+$/i)||[""])[0]}],j=[],k=0,l=f.total_size||0,m=[];a.each(i,function(a,b){j[j.length]=b}),f.trigger("FileSelect",this,f,j),a.each(i,function(d,g){var h=g.name,i=g.size,j=function(a){return a.replace("$ext",String(h.match(/[^\.]+$/i)||"")).replace("$file",h.match(/[^\/\\]+$/gi)).replace("$size",b(i)+" > "+b(f.maxfile))};f.accept&&h&&!h.match(f.rxAccept)&&(m[m.length]=j(f.STRING.denied),f.trigger("FileInvalid",this,f,[g])),a(f.wrapper).find("input[type=file]").not(e).each(function(){a.each(c(this),function(a,b){if(b.name){var c=(b.name||"").replace(/^C:\\fakepath\\/gi,"");(h==c||h==c.substr(c.length-h.length))&&(m[m.length]=j(f.STRING.duplicate),f.trigger("FileDuplicate",e,f,[b]))}})}),f.maxfile>0&&i>0&&i>f.maxfile&&(m[m.length]=j(f.STRING.toobig),f.trigger("FileTooBig",this,f,[g]));var l=f.trigger("FileValidate",this,f,[g]);l&&""!=l&&(m[m.length]=j(l)),k+=g.size}),l+=k,j.size=k,j.total=l,j.total_length=j.length+h.length,f.max>0&&h.length+i.length>f.max&&(m[m.length]=f.STRING.toomany.replace("$max",f.max),f.trigger("FileTooMany",this,f,j)),f.maxsize>0&&l>f.maxsize&&(m[m.length]=f.STRING.toomuch.replace("$size",b(l)+" > "+b(f.maxsize)),f.trigger("FileTooMuch",this,f,j));var n=a(f.clone).clone();return n.addClass("MultiFile"),m.length>0?(f.error(m.join("\n\n")),f.n--,f.addSlave(n[0],g),d.parent().prepend(n),d.remove(),!1):(f.total_size=l,i=h.concat(j),i.size=l,i.size_label=b(l),f.files=i,a(this).css({position:"absolute",top:"-3000px"}),d.after(n),f.addSlave(n[0],g+1),f.addToList(this,g,j),f.trigger("afterFileSelect",this,f,j),void 0)}),a(d).data("MultiFile-wrap",f.wrapper),a(f.wrapper).data("MultiFile",f),h&&a(d).attr("disabled","disabled").prop("disabled",!0)},f.addToList=function(d,e,g){f.trigger("FileAppend",d,f,g);var h=a("<span/>");a.each(g,function(c,e){var g=String(e.name||""),i=f.STRING,j=i.label||i.file||i.name,k=i.title||i.tooltip||i.selected,l='<img class="MultiFile-preview" style="'+f.previewCss+'"/>',m=a(('<span class="MultiFile-label" title="'+k+'"><span class="MultiFile-title">'+j+"</span>"+(f.preview||a(d).is(".with-preview")?l:"")+"</span>").replace(/\$(file|name)/gi,(g.match(/[^\/\\]+$/gi)||[g])[0]).replace(/\$(ext|extension|type)/gi,(g.match(/[^\.]+$/gi)||[""])[0]).replace(/\$(size)/gi,b(e.size||0)).replace(/\$(preview)/gi,l).replace(/\$(i)/gi,c));m.find("img.MultiFile-preview").each(function(){var a=this,b=new FileReader;b.readAsDataURL(e),b.onload=function(b){a.src=b.target.result}}),c>1&&h.append(", "),h.append(m);var g=String(e.name||"");h[h.length]=('<span class="MultiFile-title" title="'+f.STRING.selected+'">'+f.STRING.file+"</span>").replace(/\$(file|name)/gi,(g.match(/[^\/\\]+$/gi)||[g])[0]).replace(/\$(ext|extension|type)/gi,(g.match(/[^\.]+$/gi)||[""])[0]).replace(/\$(size)/gi,b(e.size||0)).replace(/\$(i)/gi,c)});var i=a('<div class="MultiFile-label"></div>'),j=a('<a class="MultiFile-remove" href="#'+f.wrapID+'">'+f.STRING.remove+"</a>").click(function(){var e=c(d);f.trigger("FileRemove",d,f,e),f.n--,f.current.disabled=!1,a(d).remove(),a(this).parent().remove(),a(f.current).css({position:"",top:""}),a(f.current).reset().val("").attr("value","")[0].value="";var g=[],h=0;return a(f.wrapper).find("input[type=file]").each(function(){a.each(c(this),function(a,b){b.name&&(g[g.length]=b,h+=b.size)})}),f.files=g,f.total_size=h,f.size_label=b(h),a(f.wrapper).data("MultiFile",f),f.trigger("afterFileRemove",d,f,e),f.trigger("FileChange",f.current,f,g),!1});f.list.append(i.append(j," ",h)),f.trigger("afterFileAppend",d,f,g),f.trigger("FileChange",d,f,f.files)},f.MultiFile||f.addSlave(f.e,0),f.n++})},a.extend(a.fn.MultiFile,{data:function(){var b=a(this),c=b.is(".MultiFile-wrap"),d=c?b:b.data("MultiFile-wrap");if(!d||!d.length)return!console.error("Could not find MultiFile control wrapper");var e=d.data("MultiFile");return e?e||{}:!console.error("Could not find MultiFile data in wrapper")},reset:function(){var b=this.MultiFile("data");return b&&a(b.list).find("a.MultiFile-remove").click(),a(this)},files:function(){var a=this.MultiFile("data");return a?a.files||[]:!console.log("MultiFile plugin not initialized")},size:function(){var a=this.MultiFile("data");return a?a.total_size||0:!console.log("MultiFile plugin not initialized")},count:function(){var a=this.MultiFile("data");return a?a.files?a.files.length||0:0:!console.log("MultiFile plugin not initialized")},disableEmpty:function(b){b=("string"==typeof b?b:"")||"mfD";var c=[];return a("input:file.MultiFile").each(function(){""==a(this).val()&&(c[c.length]=this)}),window.clearTimeout(a.fn.MultiFile.reEnableTimeout),a.fn.MultiFile.reEnableTimeout=window.setTimeout(a.fn.MultiFile.reEnableEmpty,500),a(c).each(function(){this.disabled=!0}).addClass(b)},reEnableEmpty:function(b){return b=("string"==typeof b?b:"")||"mfD",a("input:file."+b).removeClass(b).each(function(){this.disabled=!1})},intercepted:{},intercept:function(b,c,d){var e,f;if(d=d||[],d.constructor.toString().indexOf("Array")<0&&(d=[d]),"function"==typeof b)return a.fn.MultiFile.disableEmpty(),f=b.apply(c||window,d),setTimeout(function(){a.fn.MultiFile.reEnableEmpty()},1e3),f;b.constructor.toString().indexOf("Array")<0&&(b=[b]);for(var g=0;g<b.length;g++)e=b[g]+"",e&&function(b){a.fn.MultiFile.intercepted[b]=a.fn[b]||function(){},a.fn[b]=function(){return a.fn.MultiFile.disableEmpty(),f=a.fn.MultiFile.intercepted[b].apply(this,arguments),setTimeout(function(){a.fn.MultiFile.reEnableEmpty()},1e3),f}}(e)}}),a.fn.MultiFile.options={accept:"",max:-1,maxfile:-1,maxsize:-1,namePattern:"$name",preview:!1,previewCss:"max-height:100px; max-width:100px;",STRING:{remove:"x",denied:"$ext 파일을 사용할 수 없습니다.\n다시 시도해주세요...",file:"$file",selected:"선택한 파일: $file",duplicate:"$file 은 이미 선택된 파일입니다.",toomuch:"업로드 가능한 최대 용량을 초과하였습니다. ($size)",toomany:"업로드 가능한 파일 개수를 초과하였습니다. (최대: $max개)",toobig:"$file 은 파일 용량이 너무 큽니다. (최대 $size)"},autoIntercept:["submit","ajaxSubmit","ajaxForm","validate","valid"],error:function(a){"undefined"!=typeof console&&console.log(a),alert(a)}},a.fn.reset=a.fn.reset||function(){return this.each(function(){try{this.reset()}catch(a){}})},a(function(){a("input[type=file].multi").MultiFile()})}(jQuery);


/**
 * jquery.switchButton.js v1.0
 * jQuery iPhone-like switch button
 * @author Olivier Lance <olivier.lance@sylights.com>
 */
(function($) {
    $.widget("sylightsUI.switchButton", {
        options: {
            checked: undefined,			// State of the switch
            show_labels: true,			// Should we show the on and off labels?
            labels_placement: "both", 	// Position of the labels: "both", "left" or "right"
            on_label: "ON",				// Text to be displayed when checked
            off_label: "OFF",			// Text to be displayed when unchecked
            width: 25,					// Width of the button in pixels
            height: 11,					// Height of the button in pixels
            button_width: 12,			// Width of the sliding part in pixels
            clear: true,				// Should we insert a div with style="clear: both;" after the switch button?
            clear_after: null		    // Override the element after which the clearing div should be inserted (null > right after the button)
        },
        _create: function() {
            // Init the switch from the checkbox if no state was specified on creation
            if (this.options.checked === undefined) {
                this.options.checked = this.element.prop("checked");
            }
            this._initLayout();
            this._initEvents();
        },
        _initLayout: function() {
            // Hide the receiver element
            this.element.hide();
            // Create our objects: two labels and the button
            this.off_label = $("<span>").addClass("switch-button-label");
            this.on_label = $("<span>").addClass("switch-button-label");
            this.button_bg = $("<div>").addClass("switch-button-background");
            this.button = $("<div>").addClass("switch-button-button");
            // Insert the objects into the DOM
            this.off_label.insertAfter(this.element);
            this.button_bg.insertAfter(this.off_label);
            this.on_label.insertAfter(this.button_bg);
            this.button_bg.append(this.button);
            // Insert a clearing element after the specified element if needed
            if(this.options.clear)
            {
                if (this.options.clear_after === null) {
                    this.options.clear_after = this.on_label;
                }
                $("<div>").css({
                    clear: "left"
                }).insertAfter(this.options.clear_after);
            }
            // Call refresh to update labels text and visibility
            this._refresh();
            // Init labels and switch state
            // This will animate all checked switches to the ON position when
            // loading... this is intentional!
            this.options.checked = !this.options.checked;
            this._toggleSwitch();
        },
        _refresh: function() {
            // Refresh labels display
            if (this.options.show_labels) {
                this.off_label.show();
                this.on_label.show();
            }
            else {
                this.off_label.hide();
                this.on_label.hide();
            }
            // Move labels around depending on labels_placement option
            switch(this.options.labels_placement) {
                case "both":
                {
                    // Don't move anything if labels are already in place
                    if(this.button_bg.prev() !== this.off_label || this.button_bg.next() !== this.on_label)
                    {
                        // Detach labels form DOM and place them correctly
                        this.off_label.detach();
                        this.on_label.detach();
                        this.off_label.insertBefore(this.button_bg);
                        this.on_label.insertAfter(this.button_bg);
                        // Update label classes
                        this.on_label.addClass(this.options.checked ? "on" : "off").removeClass(this.options.checked ? "off" : "on");
                        this.off_label.addClass(this.options.checked ? "off" : "on").removeClass(this.options.checked ? "on" : "off");
                    }
                    break;
                }
                case "left":
                {
                    // Don't move anything if labels are already in place
                    if(this.button_bg.prev() !== this.on_label || this.on_label.prev() !== this.off_label)
                    {
                        // Detach labels form DOM and place them correctly
                        this.off_label.detach();
                        this.on_label.detach();
                        this.off_label.insertBefore(this.button_bg);
                        this.on_label.insertBefore(this.button_bg);
                        // update label classes
                        this.on_label.addClass("on").removeClass("off");
                        this.off_label.addClass("off").removeClass("on");
                    }
                    break;
                }
                case "right":
                {
                    // Don't move anything if labels are already in place
                    if(this.button_bg.next() !== this.off_label || this.off_label.next() !== this.on_label)
                    {
                        // Detach labels form DOM and place them correctly
                        this.off_label.detach();
                        this.on_label.detach();
                        this.off_label.insertAfter(this.button_bg);
                        this.on_label.insertAfter(this.off_label);
                        // update label classes
                        this.on_label.addClass("on").removeClass("off");
                        this.off_label.addClass("off").removeClass("on");
                    }
                    break;
                }
            }
            // Refresh labels texts
            this.on_label.html(this.options.on_label);
            this.off_label.html(this.options.off_label);
            // Refresh button's dimensions
            this.button_bg.width(this.options.width);
            this.button_bg.height(this.options.height);
            this.button.width(this.options.button_width);
            this.button.height(this.options.height);
        },
        _initEvents: function() {
            var self = this;
            // Toggle switch when the switch is clicked
            this.button_bg.click(function(e) {
                e.preventDefault();
                e.stopPropagation();
                self._toggleSwitch();
                return false;
            });
            this.button.click(function(e) {
                e.preventDefault();
                e.stopPropagation();
                self._toggleSwitch();
                return false;
            });
            // Set switch value when clicking labels
            this.on_label.click(function(e) {
                if (self.options.checked && self.options.labels_placement === "both") {
                    return false;
                }
                self._toggleSwitch();
                return false;
            });
            this.off_label.click(function(e) {
                if (!self.options.checked && self.options.labels_placement === "both") {
                    return false;
                }
                self._toggleSwitch();
                return false;
            });
        },
        _setOption: function(key, value) {
            if (key === "checked") {
                this._setChecked(value);
                return;
            }
            this.options[key] = value;
            this._refresh();
        },
        _setChecked: function(value) {
            if (value === this.options.checked) {
                return;
            }
            this.options.checked = !value;
            this._toggleSwitch();
        },
        _toggleSwitch: function() {
            this.options.checked = !this.options.checked;
            var newLeft = "";
            if (this.options.checked) {
                // Update the underlying checkbox state
                this.element.prop("checked", true);
                this.element.change();
                var dLeft = this.options.width - this.options.button_width;
                newLeft = "+=" + dLeft;
                // Update labels states
                if(this.options.labels_placement == "both")
                {
                    this.off_label.removeClass("on").addClass("off");
                    this.on_label.removeClass("off").addClass("on");
                }
                else
                {
                    this.off_label.hide();
                    this.on_label.show();
                }
            }
            else {
                // Update the underlying checkbox state
                this.element.prop("checked", false);
                this.element.change();
                newLeft = "-1px";
                // Update labels states
                if(this.options.labels_placement == "both")
                {
                    this.off_label.removeClass("off").addClass("on");
                    this.on_label.removeClass("on").addClass("off");
                }
                else
                {
                    this.off_label.show();
                    this.on_label.hide();
                }
            }
            // Animate the switch
            this.button.animate({ left: newLeft }, 250, "easeInOutCubic");
        }
    });
})(jQuery);


/*!
 * jQuery Validation Plugin v1.15.0
 * http://jqueryvalidation.org/
 * Copyright(c) 2016 Jörn Zaefferer
 * Released under the MIT license
 */
(function(factory){
	if(typeof define === "function" && define.amd){
		define(["jquery"], factory);
	} else if(typeof module === "object" && module.exports){
		module.exports = factory(require("jquery"));
	} else{
		factory(jQuery);
	}
}(function($){
$.extend($.fn,{
	// http://jqueryvalidation.org/validate/
	validate: function(options){
		// If nothing is selected, return nothing; can't chain anyway
		if(!this.length){
			if(options && options.debug && window.console){
				console.warn("Nothing selected, can't validate, returning nothing.");
			}
			return;
		}
		// Check if a validator for this form was already created
		var validator = $.data(this[ 0 ], "validator");
		if(validator){
			return validator;
		}
		// Add novalidate tag if HTML5.
		this.attr("novalidate", "novalidate");
		validator = new $.validator(options, this[ 0 ]);
		$.data(this[ 0 ], "validator", validator);
		if(validator.settings.onsubmit){
			this.on("click.validate", ":submit", function(event){
				if(validator.settings.submitHandler){
					validator.submitButton = event.target;
				}
				// Allow suppressing validation by adding a cancel class to the submit button
				if($(this).hasClass("cancel")){
					validator.cancelSubmit = true;
				}
				// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if($(this).attr("formnovalidate") !== undefined){
					validator.cancelSubmit = true;
				}
			});
			// Validate the form on submit
			this.on("submit.validate", function(event){
				if(validator.settings.debug){
					// Prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle(){
					var hidden, result;
					if(validator.settings.submitHandler){
						if(validator.submitButton){
							// Insert a hidden input as a replacement for the missing submit button
							hidden = $("<input type='hidden'/>")
								.attr("name", validator.submitButton.name)
								.val($(validator.submitButton).val())
								.appendTo(validator.currentForm);
						}
						result = validator.settings.submitHandler.call(validator, validator.currentForm, event);
						if(validator.submitButton){
							// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						if(result !== undefined){
							return result;
						}
						return false;
					}
					return true;
				}
				// Prevent submit for invalid forms or custom submit handlers
				if(validator.cancelSubmit){
					validator.cancelSubmit = false;
					return handle();
				}
				if(validator.form()){
					if(validator.pendingRequest){
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else{
					validator.focusInvalid();
					return false;
				}
			});
		}
		return validator;
	},
	// http://jqueryvalidation.org/valid/
	valid: function(){
		var valid, validator, errorList;
		if($(this[ 0 ]).is("form")){
			valid = this.validate().form();
		} else{
			errorList = [];
			valid = true;
			validator = $(this[ 0 ].form).validate();
			this.each(function(){
				valid = validator.element(this) && valid;
				if(!valid){
					errorList = errorList.concat(validator.errorList);
				}
			});
			validator.errorList = errorList;
		}
		return valid;
	},
	// http://jqueryvalidation.org/rules/
	rules: function(command, argument){
		// If nothing is selected, return nothing; can't chain anyway
		if(!this.length){
			return;
		}
		var element = this[ 0 ],
			settings, staticRules, existingRules, data, param, filtered;
		if(command){
			settings = $.data(element.form, "validator").settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules(element);
			switch(command){
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				// Remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[ element.name ] = existingRules;
				if(argument.messages){
					settings.messages[ element.name ] = $.extend(settings.messages[ element.name ], argument.messages);
				}
				break;
			case "remove":
				if(!argument){
					delete staticRules[ element.name ];
					return existingRules;
				}
				filtered ={};
				$.each(argument.split(/\s/), function(index, method){
					filtered[ method ] = existingRules[ method ];
					delete existingRules[ method ];
					if(method === "required"){
						$(element).removeAttr("aria-required");
					}
				});
				return filtered;
			}
		}
		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.dataRules(element),
			$.validator.staticRules(element)
		), element);
		// Make sure required is at front
		if(data.required){
			param = data.required;
			delete data.required;
			data = $.extend({required: param}, data);
			$(element).attr("aria-required", "true");
		}
		// Make sure remote is at back
		if(data.remote){
			param = data.remote;
			delete data.remote;
			data = $.extend(data,{remote: param});
		}
		return data;
	}
});
// Custom selectors
$.extend($.expr[ ":" ],{
	// http://jqueryvalidation.org/blank-selector/
	blank: function(a){
		return !$.trim("" + $(a).val());
	},
	// http://jqueryvalidation.org/filled-selector/
	filled: function(a){
		var val = $(a).val();
		return val !== null && !!$.trim("" + val);
	},
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function(a){
		return !$(a).prop("checked");
	}
});
// Constructor for validator
$.validator = function(options, form){
	this.settings = $.extend(true,{}, $.validator.defaults, options);
	this.currentForm = form;
	this.init();
};
// http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function(source, params){
	if(arguments.length === 1){
		return function(){
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply(this, args);
		};
	}
	if(params === undefined){
		return source;
	}
	if(arguments.length > 2 && params.constructor !== Array ){
		params = $.makeArray(arguments).slice(1);
	}
	if(params.constructor !== Array){
		params = [ params ];
	}
	$.each(params, function(i, n){
		source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function(){
			return n;
		});
	});
	return source;
};
$.extend($.validator,{
	defaults:{
		messages:{},
		groups:{},
		rules:{},
		errorClass: "error",
		pendingClass: "pending",
		validClass: "valid",
		errorElement: "label",
		focusCleanup: false,
		focusInvalid: true,
		errorContainer: $([]),
		errorLabelContainer: $([]),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function(element){
			this.lastActive = element;
			// Hide error label and remove error class on focus if enabled
			if(this.settings.focusCleanup){
				if(this.settings.unhighlight){
					this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
				}
				this.hideThese(this.errorsFor(element));
			}
		},
		onfocusout: function(element){
			if(!this.checkable(element) &&(element.name in this.submitted || !this.optional(element))){
				this.element(element);
			}
		},
		onkeyup: function(element, event){
			// Avoid revalidate the field when pressing one of the following keys
			// Shift       => 16
			// Ctrl        => 17
			// Alt         => 18
			// Caps lock   => 20
			// End         => 35
			// Home        => 36
			// Left arrow  => 37
			// Up arrow    => 38
			// Right arrow => 39
			// Down arrow  => 40
			// Insert      => 45
			// Num lock    => 144
			// AltGr key   => 225
			var excludedKeys = [
				16, 17, 18, 20, 35, 36, 37,
				38, 39, 40, 45, 144, 225
			];
			if(event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1){
				return;
			} else if(element.name in this.submitted || element.name in this.invalid){
				this.element(element);
			}
		},
		onclick: function(element){
			// Click on selects, radiobuttons and checkboxes
			if(element.name in this.submitted){
				this.element(element);
			// Or option elements, check parent select in that case
			} else if(element.parentNode.name in this.submitted){
				this.element(element.parentNode);
			}
		},
		highlight: function(element, errorClass, validClass){
			if(element.type === "radio"){
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else{
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function(element, errorClass, validClass){
			if(element.type === "radio"){
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else{
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},
	// http://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function(settings){
		$.extend($.validator.defaults, settings);
	},
	messages:{
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date(ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format("Please enter no more than{0} characters."),
		minlength: $.validator.format("Please enter at least{0} characters."),
		rangelength: $.validator.format("Please enter a value between{0} and{1} characters long."),
		range: $.validator.format("Please enter a value between{0} and{1}."),
		max: $.validator.format("Please enter a value less than or equal to{0}."),
		min: $.validator.format("Please enter a value greater than or equal to{0}."),
		step: $.validator.format("Please enter a multiple of{0}.")
	},
	autoCreateRanges: false,
	prototype:{
		init: function(){
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
			this.submitted ={};
			this.valueCache ={};
			this.pendingRequest = 0;
			this.pending ={};
			this.invalid ={};
			this.reset();
			var groups =(this.groups ={}),
				rules;
			$.each(this.settings.groups, function(key, value){
				if(typeof value === "string"){
					value = value.split(/\s/);
				}
				$.each(value, function(index, name){
					groups[ name ] = key;
				});
			});
			rules = this.settings.rules;
			$.each(rules, function(key, value){
				rules[ key ] = $.validator.normalizeRule(value);
			});
			function delegate(event){
				var validator = $.data(this.form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, ""),
					settings = validator.settings;
				if(settings[ eventType ] && !$(this).is(settings.ignore)){
					settings[ eventType ].call(validator, this, event);
				}
			}
			$(this.currentForm)
				.on("focusin.validate focusout.validate keyup.validate",
					":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " +
					"[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " +
					"[type='radio'], [type='checkbox'], [contenteditable]", delegate)
				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);
			if(this.settings.invalidHandler){
				$(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
			}
			// Add aria-required to any Static/Data/Class required fields before first validation
			// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
			$(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
		},
		// http://jqueryvalidation.org/Validator.form/
		form: function(){
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if(!this.valid()){
				$(this.currentForm).triggerHandler("invalid-form", [ this ]);
			}
			this.showErrors();
			return this.valid();
		},
		checkForm: function(){
			this.prepareForm();
			for(var i = 0, elements =(this.currentElements = this.elements()); elements[ i ]; i++){
				this.check(elements[ i ]);
			}
			return this.valid();
		},
		// http://jqueryvalidation.org/Validator.element/
		element: function(element){
			var cleanElement = this.clean(element),
				checkElement = this.validationTargetFor(cleanElement),
				v = this,
				result = true,
				rs, group;
			if(checkElement === undefined){
				delete this.invalid[ cleanElement.name ];
			} else{
				this.prepareElement(checkElement);
				this.currentElements = $(checkElement);
				// If this element is grouped, then validate all group elements already
				// containing a value
				group = this.groups[ checkElement.name ];
				if(group){
					$.each(this.groups, function(name, testgroup){
						if(testgroup === group && name !== checkElement.name){
							cleanElement = v.validationTargetFor(v.clean(v.findByName(name)));
							if(cleanElement && cleanElement.name in v.invalid){
								v.currentElements.push(cleanElement);
								result = result && v.check(cleanElement);
							}
						}
					});
				}
				rs = this.check(checkElement) !== false;
				result = result && rs;
				if(rs){
					this.invalid[ checkElement.name ] = false;
				} else{
					this.invalid[ checkElement.name ] = true;
				}
				if(!this.numberOfInvalids()){
					// Hide error containers on last error
					this.toHide = this.toHide.add(this.containers);
				}
				this.showErrors();
				// Add aria-invalid status for screen readers
				$(element).attr("aria-invalid", !rs);
			}
			return result;
		},
		// http://jqueryvalidation.org/Validator.showErrors/
		showErrors: function(errors){
			if(errors){
				var validator = this;
				// Add items to error list and map
				$.extend(this.errorMap, errors);
				this.errorList = $.map(this.errorMap, function(message, name){
					return{
						message: message,
						element: validator.findByName(name)[ 0 ]
					};
				});
				// Remove items from success list
				this.successList = $.grep(this.successList, function(element){
					return !(element.name in errors);
				});
			}
			if(this.settings.showErrors){
				this.settings.showErrors.call(this, this.errorMap, this.errorList);
			} else{
				this.defaultShowErrors();
			}
		},
		// http://jqueryvalidation.org/Validator.resetForm/
		resetForm: function(){
			if($.fn.resetForm){
				$(this.currentForm).resetForm();
			}
			this.invalid ={};
			this.submitted ={};
			this.prepareForm();
			this.hideErrors();
			var elements = this.elements()
				.removeData("previousValue")
				.removeAttr("aria-invalid");
			this.resetElements(elements);
		},
		resetElements: function(elements){
			var i;
			if(this.settings.unhighlight){
				for(i = 0; elements[ i ]; i++){
					this.settings.unhighlight.call(this, elements[ i ],
						this.settings.errorClass, "");
					this.findByName(elements[ i ].name).removeClass(this.settings.validClass);
				}
			} else{
				elements
					.removeClass(this.settings.errorClass)
					.removeClass(this.settings.validClass);
			}
		},
		numberOfInvalids: function(){
			return this.objectLength(this.invalid);
		},
		objectLength: function(obj){
			/* jshint unused: false */
			var count = 0,
				i;
			for(i in obj){
				if(obj[ i ]){
					count++;
				}
			}
			return count;
		},
		hideErrors: function(){
			this.hideThese(this.toHide);
		},
		hideThese: function(errors){
			errors.not(this.containers).text("");
			this.addWrapper(errors).hide();
		},
		valid: function(){
			return this.size() === 0;
		},
		size: function(){
			return this.errorList.length;
		},
		focusInvalid: function(){
			if(this.settings.focusInvalid){
				try{
					$(this.findLastActive() || this.errorList.length && this.errorList[ 0 ].element || [])
					.filter(":visible")
					.focus()
					// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e){
					// Ignore IE throwing errors when focusing hidden elements
				}
			}
		},
		findLastActive: function(){
			var lastActive = this.lastActive;
			return lastActive && $.grep(this.errorList, function(n){
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},
		elements: function(){
			var validator = this,
				rulesCache ={};
			// Select all valid inputs inside the form(no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea, [contenteditable]")
			.not(":submit, :reset, :image, :disabled")
			.not(this.settings.ignore)
			.filter(function(){
				var name = this.name || $(this).attr("name"); // For contenteditable
				if(!name && validator.settings.debug && window.console){
					console.error("%o has no name assigned", this);
				}
				// Set form expando on contenteditable
				if(this.hasAttribute("contenteditable")){
					this.form = $(this).closest("form")[ 0 ];
				}
				// Select only the first element for each name, and only those with rules specified
				if(name in rulesCache || !validator.objectLength($(this).rules())){
					return false;
				}
				rulesCache[ name ] = true;
				return true;
			});
		},
		clean: function(selector){
			return $(selector)[ 0 ];
		},
		errors: function(){
			var errorClass = this.settings.errorClass.split(" ").join(".");
			return $(this.settings.errorElement + "." + errorClass, this.errorContext);
		},
		resetInternals: function(){
			this.successList = [];
			this.errorList = [];
			this.errorMap ={};
			this.toShow = $([]);
			this.toHide = $([]);
		},
		reset: function(){
			this.resetInternals();
			this.currentElements = $([]);
		},
		prepareForm: function(){
			this.reset();
			this.toHide = this.errors().add(this.containers);
		},
		prepareElement: function(element){
			this.reset();
			this.toHide = this.errorsFor(element);
		},
		elementValue: function(element){
			var $element = $(element),
				type = element.type,
				val, idx;
			if(type === "radio" || type === "checkbox"){
				return this.findByName(element.name).filter(":checked").val();
			} else if(type === "number" && typeof element.validity !== "undefined"){
				return element.validity.badInput ? "NaN" : $element.val();
			}
			if(element.hasAttribute("contenteditable")){
				val = $element.text();
			} else{
				val = $element.val();
			}
			if(type === "file"){
				// Modern browser(chrome & safari)
				if(val.substr(0, 12) === "C:\\fakepath\\"){
					return val.substr(12);
				}
				// Legacy browsers
				// Unix-based path
				idx = val.lastIndexOf("/");
				if(idx >= 0){
					return val.substr(idx + 1);
				}
				// Windows-based path
				idx = val.lastIndexOf("\\");
				if(idx >= 0){
					return val.substr(idx + 1);
				}
				// Just the file name
				return val;
			}
			if(typeof val === "string"){
				return val.replace(/\r/g, "");
			}
			return val;
		},
		check: function(element){
			element = this.validationTargetFor(this.clean(element));
			var rules = $(element).rules(),
				rulesCount = $.map(rules, function(n, i){
					return i;
				}).length,
				dependencyMismatch = false,
				val = this.elementValue(element),
				result, method, rule;
			// If a normalizer is defined for this element, then
			// call it to retreive the changed value instead
			// of using the real one.
			// Note that `this` in the normalizer is `element`.
			if(typeof rules.normalizer === "function"){
				val = rules.normalizer.call(element, val);
				if(typeof val !== "string"){
					throw new TypeError("The normalizer should return a string value.");
				}
				// Delete the normalizer from rules to avoid treating
				// it as a pre-defined method.
				delete rules.normalizer;
			}
			for(method in rules){
				rule ={method: method, parameters: rules[ method ]};
				try{
					result = $.validator.methods[ method ].call(this, val, element, rule.parameters);
					// If a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if(result === "dependency-mismatch" && rulesCount === 1){
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;
					if(result === "pending"){
						this.toHide = this.toHide.not(this.errorsFor(element));
						return;
					}
					if(!result){
						this.formatAndAdd(element, rule);
						return false;
					}
				} catch(e){
					if(this.settings.debug && window.console){
						console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
					}
					if(e instanceof TypeError){
						e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
					}
					throw e;
				}
			}
			if(dependencyMismatch){
				return;
			}
			if(this.objectLength(rules)){
				this.successList.push(element);
			}
			return true;
		},
		// Return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function(element, method){
			return $(element).data("msg" + method.charAt(0).toUpperCase() +
				method.substring(1).toLowerCase()) || $(element).data("msg");
		},
		// Return the custom message for the given element name and validation method
		customMessage: function(name, method){
			var m = this.settings.messages[ name ];
			return m &&(m.constructor === String ? m : m[ method ]);
		},
		// Return the first defined argument, allowing empty strings
		findDefined: function(){
			for(var i = 0; i < arguments.length; i++){
				if(arguments[ i ] !== undefined){
					return arguments[ i ];
				}
			}
			return undefined;
		},
		defaultMessage: function(element, rule){
			var message = this.findDefined(
					this.customMessage(element.name, rule.method),
					this.customDataMessage(element, rule.method),
					// 'title' is never undefined, so handle empty string as undefined
					!this.settings.ignoreTitle && element.title || undefined,
					$.validator.messages[ rule.method ],
					"<strong>Warning: No message defined for " + element.name + "</strong>"
				),
				theregex = /\$?\{(\d+)\}/g;
			if(typeof message === "function"){
				message = message.call(this, rule.parameters, element);
			} else if(theregex.test(message)){
				message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
			}
			return message;
		},
		formatAndAdd: function(element, rule){
			var message = this.defaultMessage(element, rule);
			this.errorList.push({
				message: message,
				element: element,
				method: rule.method
			});
			this.errorMap[ element.name ] = message;
			this.submitted[ element.name ] = message;
		},
		addWrapper: function(toToggle){
			if(this.settings.wrapper){
				toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
			}
			return toToggle;
		},
		defaultShowErrors: function(){
			var i, elements, error;
			for(i = 0; this.errorList[ i ]; i++){
				error = this.errorList[ i ];
				if(this.settings.highlight){
					this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
				}
				this.showLabel(error.element, error.message);
			}
			if(this.errorList.length){
				this.toShow = this.toShow.add(this.containers);
			}
			if(this.settings.success){
				for(i = 0; this.successList[ i ]; i++){
					this.showLabel(this.successList[ i ]);
				}
			}
			if(this.settings.unhighlight){
				for(i = 0, elements = this.validElements(); elements[ i ]; i++){
					this.settings.unhighlight.call(this, elements[ i ], this.settings.errorClass, this.settings.validClass);
				}
			}
			this.toHide = this.toHide.not(this.toShow);
			this.hideErrors();
			this.addWrapper(this.toShow).show();
		},
		validElements: function(){
			return this.currentElements.not(this.invalidElements());
		},
		invalidElements: function(){
			return $(this.errorList).map(function(){
				return this.element;
			});
		},
		showLabel: function(element, message){
			var place, group, errorID, v,
				error = this.errorsFor(element),
				elementID = this.idOrName(element),
				describedBy = $(element).attr("aria-describedby");
			if(error.length){
				// Refresh error/success class
				error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
				// Replace message on existing label
				error.html(message);
			} else{
				// Create error element
				error = $("<" + this.settings.errorElement + ">")
					.attr("id", elementID + "-error")
					.addClass(this.settings.errorClass)
					.html(message || "");
				// Maintain reference to the element to be placed into the DOM
				place = error;
				if(this.settings.wrapper){
					// Make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
				}
				if(this.labelContainer.length){
					this.labelContainer.append(place);
				} else if(this.settings.errorPlacement){
					this.settings.errorPlacement(place, $(element));
				} else{
					place.insertAfter(element);
				}
				// Link error back to the element
				if(error.is("label")){
					// If the error is a label, then associate using 'for'
					error.attr("for", elementID);
					// If the element is not a child of an associated label, then it's necessary
					// to explicitly apply aria-describedby
				} else if(error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length === 0){
					errorID = error.attr("id");
					// Respect existing non-error aria-describedby
					if(!describedBy){
						describedBy = errorID;
					} else if(!describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b"))){
						// Add to end of list if not already present
						describedBy += " " + errorID;
					}
					$(element).attr("aria-describedby", describedBy);
					// If this element is grouped, then assign to all elements in the same group
					group = this.groups[ element.name ];
					if(group){
						v = this;
						$.each(v.groups, function(name, testgroup){
							if(testgroup === group){
								$("[name='" + v.escapeCssMeta(name) + "']", v.currentForm)
									.attr("aria-describedby", error.attr("id"));
							}
						});
					}
				}
			}
			if(!message && this.settings.success){
				error.text("");
				if(typeof this.settings.success === "string"){
					error.addClass(this.settings.success);
				} else{
					this.settings.success(error, element);
				}
			}
			this.toShow = this.toShow.add(error);
		},
		errorsFor: function(element){
			var name = this.escapeCssMeta(this.idOrName(element)),
				describer = $(element).attr("aria-describedby"),
				selector = "label[for='" + name + "'], label[for='" + name + "'] *";
			// 'aria-describedby' should directly reference the error element
			if(describer){
				selector = selector + ", #" + this.escapeCssMeta(describer)
					.replace(/\s+/g, ", #");
			}
			return this
				.errors()
				.filter(selector);
		},
		// See https://api.jquery.com/category/selectors/, for CSS
		// meta-characters that should be escaped in order to be used with JQuery
		// as a literal part of a name/id or any selector.
		escapeCssMeta: function(string){
			return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
		},
		idOrName: function(element){
			return this.groups[ element.name ] ||(this.checkable(element) ? element.name : element.id || element.name);
		},
		validationTargetFor: function(element){
			// If radio/checkbox, validate first element in group instead
			if(this.checkable(element)){
				element = this.findByName(element.name);
			}
			// Always apply ignore filter
			return $(element).not(this.settings.ignore)[ 0 ];
		},
		checkable: function(element){
			return(/radio|checkbox/i).test(element.type);
		},
		findByName: function(name){
			return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
		},
		getLength: function(value, element){
			switch(element.nodeName.toLowerCase()){
			case "select":
				return $("option:selected", element).length;
			case "input":
				if(this.checkable(element)){
					return this.findByName(element.name).filter(":checked").length;
				}
			}
			return value.length;
		},
		depend: function(param, element){
			return this.dependTypes[ typeof param ] ? this.dependTypes[ typeof param ](param, element) : true;
		},
		dependTypes:{
			"boolean": function(param){
				return param;
			},
			"string": function(param, element){
				return !!$(param, element.form).length;
			},
			"function": function(param, element){
				return param(element);
			}
		},
		optional: function(element){
			var val = this.elementValue(element);
			return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
		},
		startRequest: function(element){
			if(!this.pending[ element.name ]){
				this.pendingRequest++;
				$(element).addClass(this.settings.pendingClass);
				this.pending[ element.name ] = true;
			}
		},
		stopRequest: function(element, valid){
			this.pendingRequest--;
			// Sometimes synchronization fails, make sure pendingRequest is never < 0
			if(this.pendingRequest < 0){
				this.pendingRequest = 0;
			}
			delete this.pending[ element.name ];
			$(element).removeClass(this.settings.pendingClass);
			if(valid && this.pendingRequest === 0 && this.formSubmitted && this.form()){
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if(!valid && this.pendingRequest === 0 && this.formSubmitted){
				$(this.currentForm).triggerHandler("invalid-form", [ this ]);
				this.formSubmitted = false;
			}
		},
		previousValue: function(element, method){
			return $.data(element, "previousValue") || $.data(element, "previousValue",{
				old: null,
				valid: true,
				message: this.defaultMessage(element,{method: method})
			});
		},
		// Cleans up all forms and elements, removes validator-specific events
		destroy: function(){
			this.resetForm();
			$(this.currentForm)
				.off(".validate")
				.removeData("validator")
				.find(".validate-equalTo-blur")
					.off(".validate-equalTo")
					.removeClass("validate-equalTo-blur");
		}
	},
	classRuleSettings:{
		required:{required: true},
		email:{email: true},
		url:{url: true},
		date:{date: true},
		dateISO:{dateISO: true},
		number:{number: true},
		digits:{digits: true},
		creditcard:{creditcard: true}
	},
	addClassRules: function(className, rules){
		if(className.constructor === String){
			this.classRuleSettings[ className ] = rules;
		} else{
			$.extend(this.classRuleSettings, className);
		}
	},
	classRules: function(element){
		var rules ={},
			classes = $(element).attr("class");
		if(classes){
			$.each(classes.split(" "), function(){
				if(this in $.validator.classRuleSettings){
					$.extend(rules, $.validator.classRuleSettings[ this ]);
				}
			});
		}
		return rules;
	},
	normalizeAttributeRule: function(rules, type, method, value){
		// Convert the value to a number for number inputs, and for text for backwards compability
		// allows type="date" and others to be compared as strings
		if(/min|max|step/.test(method) &&(type === null || /number|range|text/.test(type))){
			value = Number(value);
			// Support Opera Mini, which returns NaN for undefined minlength
			if(isNaN(value)){
				value = undefined;
			}
		}
		if(value || value === 0){
			rules[ method ] = value;
		} else if(type === method && type !== "range"){
			// Exception: the jquery validate 'range' method
			// does not test for the html5 'range' type
			rules[ method ] = true;
		}
	},
	attributeRules: function(element){
		var rules ={},
			$element = $(element),
			type = element.getAttribute("type"),
			method, value;
		for(method in $.validator.methods){
			// Support for <input required> in both html5 and older browsers
			if(method === "required"){
				value = element.getAttribute(method);
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if(value === ""){
					value = true;
				}
				// Force non-HTML5 browsers to return bool
				value = !!value;
			} else{
				value = $element.attr(method);
			}
			this.normalizeAttributeRule(rules, type, method, value);
		}
		// 'maxlength' may be returned as -1, 2147483647(IE) and 524288(safari) for text inputs
		if(rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)){
			delete rules.maxlength;
		}
		return rules;
	},
	dataRules: function(element){
		var rules ={},
			$element = $(element),
			type = element.getAttribute("type"),
			method, value;
		for(method in $.validator.methods){
			value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());
			this.normalizeAttributeRule(rules, type, method, value);
		}
		return rules;
	},
	staticRules: function(element){
		var rules ={},
			validator = $.data(element.form, "validator");
		if(validator.settings.rules){
			rules = $.validator.normalizeRule(validator.settings.rules[ element.name ]) ||{};
		}
		return rules;
	},
	normalizeRules: function(rules, element){
		// Handle dependency check
		$.each(rules, function(prop, val){
			// Ignore rule when param is explicitly false, eg. required:false
			if(val === false){
				delete rules[ prop ];
				return;
			}
			if(val.param || val.depends){
				var keepRule = true;
				switch(typeof val.depends){
				case "string":
					keepRule = !!$(val.depends, element.form).length;
					break;
				case "function":
					keepRule = val.depends.call(element, element);
					break;
				}
				if(keepRule){
					rules[ prop ] = val.param !== undefined ? val.param : true;
				} else{
					$.data(element.form, "validator").resetElements($(element));
					delete rules[ prop ];
				}
			}
		});
		// Evaluate parameters
		$.each(rules, function(rule, parameter){
			rules[ rule ] = $.isFunction(parameter) && rule !== "normalizer" ? parameter(element) : parameter;
		});
		// Clean number parameters
		$.each([ "minlength", "maxlength" ], function(){
			if(rules[ this ]){
				rules[ this ] = Number(rules[ this ]);
			}
		});
		$.each([ "rangelength", "range" ], function(){
			var parts;
			if(rules[ this ]){
				if($.isArray(rules[ this ])){
					rules[ this ] = [ Number(rules[ this ][ 0 ]), Number(rules[ this ][ 1 ]) ];
				} else if(typeof rules[ this ] === "string"){
					parts = rules[ this ].replace(/[\[\]]/g, "").split(/[\s,]+/);
					rules[ this ] = [ Number(parts[ 0 ]), Number(parts[ 1 ]) ];
				}
			}
		});
		if($.validator.autoCreateRanges){
			// Auto-create ranges
			if(rules.min != null && rules.max != null){
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if(rules.minlength != null && rules.maxlength != null){
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}
		return rules;
	},
	// Converts a simple string to a{string: true} rule, e.g., "required" to{required:true}
	normalizeRule: function(data){
		if(typeof data === "string"){
			var transformed ={};
			$.each(data.split(/\s/), function(){
				transformed[ this ] = true;
			});
			data = transformed;
		}
		return data;
	},
	// http://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function(name, method, message){
		$.validator.methods[ name ] = method;
		$.validator.messages[ name ] = message !== undefined ? message : $.validator.messages[ name ];
		if(method.length < 3){
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},
	// http://jqueryvalidation.org/jQuery.validator.methods/
	methods:{
		// http://jqueryvalidation.org/required-method/
		required: function(value, element, param){
			// Check if dependency is met
			if(!this.depend(param, element)){
				return "dependency-mismatch";
			}
			if(element.nodeName.toLowerCase() === "select"){
				// Could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val && val.length > 0;
			}
			if(this.checkable(element)){
				return this.getLength(value, element) > 0;
			}
			return value.length > 0;
		},
		// http://jqueryvalidation.org/email-method/
		email: function(value, element){
			// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
		},
		// http://jqueryvalidation.org/url-method/
		url: function(value, element){
			// Copyright(c) 2010-2013 Diego Perini, MIT licensed
			// https://gist.github.com/dperini/729294
			// see also https://mathiasbynens.be/demo/url-regex
			// modified to allow protocol-relative URLs
			return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
		},
		// http://jqueryvalidation.org/date-method/
		date: function(value, element){
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
		},
		// http://jqueryvalidation.org/dateISO-method/
		dateISO: function(value, element){
			return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
		},
		// http://jqueryvalidation.org/number-method/
		number: function(value, element){
			return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
		},
		// http://jqueryvalidation.org/digits-method/
		digits: function(value, element){
			return this.optional(element) || /^\d+$/.test(value);
		},
		// http://jqueryvalidation.org/minlength-method/
		minlength: function(value, element, param){
			var length = $.isArray(value) ? value.length : this.getLength(value, element);
			return this.optional(element) || length >= param;
		},
		// http://jqueryvalidation.org/maxlength-method/
		maxlength: function(value, element, param){
			var length = $.isArray(value) ? value.length : this.getLength(value, element);
			return this.optional(element) || length <= param;
		},
		// http://jqueryvalidation.org/rangelength-method/
		rangelength: function(value, element, param){
			var length = $.isArray(value) ? value.length : this.getLength(value, element);
			return this.optional(element) ||(length >= param[ 0 ] && length <= param[ 1 ]);
		},
		// http://jqueryvalidation.org/min-method/
		min: function(value, element, param){
			return this.optional(element) || value >= param;
		},
		// http://jqueryvalidation.org/max-method/
		max: function(value, element, param){
			return this.optional(element) || value <= param;
		},
		// http://jqueryvalidation.org/range-method/
		range: function(value, element, param){
			return this.optional(element) ||(value >= param[ 0 ] && value <= param[ 1 ]);
		},
		// http://jqueryvalidation.org/step-method/
		step: function(value, element, param){
			var type = $(element).attr("type"),
				errorMessage = "Step attribute on input type " + type + " is not supported.",
				supportedTypes = [ "text", "number", "range" ],
				re = new RegExp("\\b" + type + "\\b"),
				notSupported = type && !re.test(supportedTypes.join());
			// Works only for text, number and range input types
			// TODO find a way to support input types date, datetime, datetime-local, month, time and week
			if(notSupported){
				throw new Error(errorMessage);
			}
			return this.optional(element) ||(value % param === 0);
		},
		// http://jqueryvalidation.org/equalTo-method/
		equalTo: function(value, element, param){
			// Bind to the blur event of the target in order to revalidate whenever the target field is updated
			var target = $(param);
			if(this.settings.onfocusout && target.not(".validate-equalTo-blur").length){
				target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function(){
					$(element).valid();
				});
			}
			return value === target.val();
		},
		// http://jqueryvalidation.org/remote-method/
		remote: function(value, element, param, method){
			if(this.optional(element)){
				return "dependency-mismatch";
			}
			method = typeof method === "string" && method || "remote";
			var previous = this.previousValue(element, method),
				validator, data, optionDataString;
			if(!this.settings.messages[ element.name ]){
				this.settings.messages[ element.name ] ={};
			}
			previous.originalMessage = previous.originalMessage || this.settings.messages[ element.name ][ method ];
			this.settings.messages[ element.name ][ method ] = previous.message;
			param = typeof param === "string" &&{url: param} || param;
			optionDataString = $.param($.extend({data: value}, param.data));
			if(previous.old === optionDataString){
				return previous.valid;
			}
			previous.old = optionDataString;
			validator = this;
			this.startRequest(element);
			data ={};
			data[ element.name ] = value;
			$.ajax($.extend(true,{
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function(response){
					var valid = response === true || response === "true",
						errors, message, submitted;
					validator.settings.messages[ element.name ][ method ] = previous.originalMessage;
					if(valid){
						submitted = validator.formSubmitted;
						validator.resetInternals();
						validator.toHide = validator.errorsFor(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						validator.invalid[ element.name ] = false;
						validator.showErrors();
					} else{
						errors ={};
						message = response || validator.defaultMessage(element,{method: method, parameters: value});
						errors[ element.name ] = previous.message = message;
						validator.invalid[ element.name ] = true;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		}
	}
});
// Ajax mode: abort
// usage: $.ajax({mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port(port can be undefined) is aborted via XMLHttpRequest.abort()
var pendingRequests ={},
	ajax;
	// Use a prefilter if available(1.5+)
	if($.ajaxPrefilter){
		$.ajaxPrefilter(function(settings, _, xhr){
			var port = settings.port;
			if(settings.mode === "abort"){
				if(pendingRequests[ port ]){
					pendingRequests[ port ].abort();
				}
				pendingRequests[ port ] = xhr;
			}
		});
	} else{
		// Proxy ajax
		ajax = $.ajax;
		$.ajax = function(settings){
			var mode =("mode" in settings ? settings : $.ajaxSettings).mode,
				port =("port" in settings ? settings : $.ajaxSettings).port;
			if(mode === "abort"){
				if(pendingRequests[ port ]){
					pendingRequests[ port ].abort();
				}
				pendingRequests[ port ] = ajax.apply(this, arguments);
				return pendingRequests[ port ];
			}
			return ajax.apply(this, arguments);
		};
	}
}));
